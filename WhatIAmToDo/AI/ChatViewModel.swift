//
//  ChatViewModel.swift
//  WhatIAmToDo
//
//  Created by Юлия Гудошникова on 12.03.2025.
//

import SwiftUI
import Combine

class ChatViewModel: ObservableObject {
    @Published var userInput = ""
    @Published var messages: [ChatMessage] = [
        ChatMessage(text: "Hello, Sarah!! I'm here to help you", isFromUser: false),
        ChatMessage(text: "Tell me what do you want to learn today?", isFromUser: false)
    ]
    @Published var isTyping = false
    @Published var aiResponded = false

    func sendMessage() {
        guard !userInput.isEmpty else { return }

        let userMessage = ChatMessage(text: userInput, isFromUser: true)
        messages.append(userMessage)
        userInput = ""

        isTyping = true
        aiResponded = false

        // Simulating AI response delay
        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
            let aiMessage = ChatMessage(text: "Here's an insightful response from the AI.", isFromUser: false)
            self.messages.append(aiMessage)
            self.isTyping = false
            self.aiResponded = true
        }
    }

    func regeneratePlan() {
        if let lastIndex = messages.lastIndex(where: { !$0.isFromUser }) {
            messages.remove(at: lastIndex)
        }

        isTyping = true
        aiResponded = false

        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
            let newAiMessage = ChatMessage(text: "Here's a new plan generated by the AI.", isFromUser: false)
            self.messages.append(newAiMessage)
            self.isTyping = false
            self.aiResponded = true
        }
    }

    func resetChat() {
        aiResponded = false
        messages = [
            ChatMessage(text: "Hello, Sarah!! I'm here to help you", isFromUser: false),
            ChatMessage(text: "Tell me what do you want to learn today?", isFromUser: false)
        ]
        userInput = ""
    }
}
